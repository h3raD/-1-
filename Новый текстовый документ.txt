//Включение библиотек
#include <stdio.h>
#include <locale.h>
#include <math.h>
#include <conio.h>
// Объявление прототипов функции
float b_one(char* b_1);
float b_two(char* b_2);

float f_Y(float);
float f_V(float);
//Объявление типа указателя на функцию
typedef float (*TFunc)(float);

void plot(double x0, double x1, TFunc f);
//Главная функция, пользовательский интерфейс
int main() { //Объявление функции main без параметра
    float x, y; // Объявление переменных x,y типа float 
    float x_1, x_2, h, y_function = 0.; // Объявление переменных x_1,x_2,h, y_function типа float
    char b_1, b_2; // Объявление переменных b_1,b_2 типа char
    int b; // Объявление переменной b типа int
    int c = 1; // Объявление переменной c типа int

    setlocale(LC_ALL, "RUS"); //Добавление русской раскладки

    puts("Выполнил Курганников Р.А.");
    puts("Группа БИСТ-225");
    puts("Проверила: Курипта О.В.");
    puts("Подзадача 1");

    while (c) { 
        printf("1 - значение Y(x)\n");
        printf("2 - значение V(x)\n");
        printf("3 - значение Y(x) на интервале Xn, Xk\n");
        printf("4 - значение V(x) на интервале Xn, Xk\n");
        printf("5 - построить график выбранной функции\n");
        printf("6 - выход\n");
        printf("\n");
        printf("Выберете из списка нужное действие:\n");
        scanf("%d", &b); //Ввод пользователем числа, выбор в меню
        switch (b) { 
        case 1: printf("Введите аргумент х\n");
            scanf("%f", &x); // Ввод x, который будет подставляться в функцию
            y = f_Y(x); // Вычисление фкнции от заданного значения пользователем, обращение к функции f_Y
            printf("Значение f(x) = %f\n", y); // Вывод значения
            system("pause");
            break;
        case 2: printf("Введите аргумент х\n");
            scanf("%f", &x); // Ввод x, который будет подставляться в функцию
            y = f_V(x); // Вычисление фкнции от заданного значения пользователем, обращение к функции f_V
            printf("Значение f(x) = %f\n", y); //Вывод значения
            system("pause");
            break;
        case 3: printf("Введите границы и аргументы через enter. При этом не вводя других символов кроме : чисел и [ ] ( )\n");
            scanf("%c", &b_1);
            scanf("%c", &b_1); // Ввод 1-ой границ

            scanf("%f%f", &x_1, &x_2); // Ввод числовых значений интервала

            scanf("%c", &b_2); 
            scanf("%c", &b_2); // Ввод 2-ой границы 

            printf("Введите шаг h:\n");
            scanf("%f", &h); //Ввод значения шага

            x_1 += b_one(&b_1); // Проверка, включается ли 1-ое число в интервал, обращение к функции b_one
            x_2 += b_two(&b_2); // Проверка, включается ли 1-ое число в интервал, обращение к функции b_two

            for (float x = x_1; x < x_2; x += h) { //Цикл для вывода функции в виде таблицы.
                y_function = f_Y(x); 
                printf("|%6f|%6f|\n", x, y_function); 
            }
            system("pause");
            break;
        case 4: printf("Введите границы и аргументы через enter. При этом не вводя других символов кроме : чисел и [ ] ( )\n");
            scanf("%c", &b_1);//Ввод 1-ой границы
            scanf("%c", &b_1);

            scanf("%f%f", &x_1, &x_2); // Ввод числовых значений интервала

            scanf("%c", &b_2); //Ввод 2-ой границы
            scanf("%c", &b_2);
            
            printf("Введите шаг h:\n");
            scanf("%f", &h); //Ввод значения шага 

            x_1 += b_one(&b_1);//Проверка, включается ли 1-ое число в интервал, обращение к функции b-one
            x_2 += b_two(&b_2);//Проверка, включается ли 2-ое число в интервал, обращение к функции b_two

            for (float x = x_1; x < x_2; x += h) { // Цыкл для вывода функции в виде таблицы
                y_function = f_V(x);
                printf("|%6f|%6f|\n", x, y_function);
            }
            system("pause");
            break;
        case 5:
            printf("1 - построить график функции F1\n");
            printf("2 - построить график функции F2\n");
            scanf("%d", &b); //Ввод пользователем числа, выбор в меню
            switch (b) {
            case 1: printf("график F1\n");
                printf("Введите интервал\n");
                scanf("%f%f", &x_1, &x_2); //Ввод значений интервала
                plot(x_1, x_2, f_Y); //Обращение к функции, построение графика.
                break;
            case 2: printf("график F2\n");
                printf("Введите интервал\n");
                scanf("%f%f", &x_1, &x_2); //Ввод значений интервала
                plot(x_1, x_2, f_V); //Обращение к функции, построение графика.
                break;
            }
            system("pause");
            break;
        default: 
            c = 0;
            break;
        }
    }
    return 0;
}

//Нахождение значения функции Y(x)
float f_Y(float x) { //Объявление функции f_Y с параметром float x
    float y_function = 0.; //Объявление переменной y_function типа float
    if (pow(x, 2) > 0) { // ОДЗ
        y_function = log(pow(x, 2)) + x + 4; //Расчёт функции в интервале ОДЗ
    }
    else printf("Аргумент находится вне ОДЗ\n");
    return y_function;
}
//Нахождение значения функции V(x)
float f_V(float x) { //Объявление функции f_V с параметром float x
    float y_function = 0.; //Объявление переменной y_function типа float
    if (x >= 2.5) { // ОДЗ для 1-ой части системы
        y_function = x - 2; //Расчёт функции в интервале ОДЗ 1
    }
    if (-1 < x < 2.5) { //ОДЗ для в 2-ой части системы 
        y_function = 1 + pow(x, 2); //Расчёт функции в интервале ОДЗ 2
    }
    if (x <= -1) { //ОДЗ для 3-ей части системы
        y_function = x * log(cos(x));  //Расчёт функции в интервале ОДЗ 3
    }
    return y_function; 
}

// Для 3 и 4 кейса, проверка границ.

float b_one(char* b_1) { //Объявлени функции b_one с параметром ссылки char* b_1
    if (*b_1 == '(') { // Число не в интервале,выколото
        return 0;// Вовзрат функции значения 0
    }
    if (*b_1 == '[') { // Число в интервале
        return 1; //Возврат функции значения 1
    }
}

// Для 3 и 4 кейса, проверка границ.

float b_two(char* b_2) { //Объявлени функции b_two с параметром ссылки char* b_2
    if (*b_2 == ')') { // Число не в интервале, выколото
        return 0; // Возврат функции значения 0
    }
    if (*b_2 == ']') { // Число в интервале
        return 1; // Возврат функции значения 1
    }
}

//Функция для построения графика

void plot(double x0, double x1, TFunc f) // Объявление функции plot с параметрами double x0, double x1, TFunc f

{

    int SCREENW = 60, SCREENH = 40;//Размеры поля вывода в символах. Ширина, высота.

    char screen[60][40]; // Объявление массива типа char с указанной шириной и высотой 

    double x, y[60];

    double ymin = 0, ymax = 0; // Объявление переменных ymin,ymax типа double

    double hx, hy; //Объявление переменных hx, hy типа double

    int i, j; // Объявление переменных i, j типа int

    int xz, yz; // Объявление переменных xz,yz типа int

    hx = (x1 - x0) / (SCREENW - 1); 

    for (i = 0, x = x0; i < SCREENW; ++i, x += hx) {

        y[i] = f(x); //расчет значений функции для каждой точки поля вывода графика

        if (y[i] < ymin) ymin = y[i];

        if (y[i] > ymax) ymax = y[i];

    }

    hy = (ymax - ymin) / (SCREENH - 1);

    yz = (int)floor(ymax / hy + 0.5);

    xz = (int)floor((0. - x0) / hx + 0.5);

    //построение осей и заполнение массива отображения пробелами

    for (j = 0; j < SCREENH; ++j) // Цикл, для ограничения графика границами

        for (i = 0; i < SCREENW; ++i) {

            if (j == yz && i == xz) screen[i][j] = '+';

            else if (j == yz) screen[i][j] = '-';

            else if (i == xz) screen[i][j] = '|';

            else screen[i][j] = ' '; 

        }

    //определение положения значения функции на поле вывода

    for (i = 0; i < SCREENW; ++i) {

        j = (int)floor((ymax - y[i]) / hy + 0.5);

        screen[i][j] = '*'; //Если значение входит в интервал, на месте ставится *. Ряд звёзд подобие линии

    }

    //печать массива символов

    for (j = 0; j < SCREENH; ++j) {

        for (i = 0; i < SCREENW; ++i)  putchar(screen[i][j]);

        putchar('\n'); // Функция, которая записывает символ,содержащий в младшем байте параметра ch. В данной случае указан перевод на новую строке.

    }

}